// <auto-generated />
using System;
using ENN_Cargo.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ENN_Cargo.DataAccess.Migrations
{
    [DbContext(typeof(ENN_CargoApplicationDbContext))]
    [Migration("20250128184505_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ENN_Cargo.Models.CompanyStock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CompanyStocks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Boyana 56,Sofia",
                            Email = "glassind@gmail.com",
                            Name = "Glass Industries",
                            PhoneNumber = "0895038543"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Medne Rudnik 23,Burgas",
                            Email = "metalind@gmail.com",
                            Name = "Metal Industries",
                            PhoneNumber = "0885037821"
                        });
                });

            modelBuilder.Entity("ENN_Cargo.Models.CompanyStocks_Shipments", b =>
                {
                    b.Property<int>("CompanyStock_Id")
                        .HasColumnType("int");

                    b.Property<int>("Shipment_Id")
                        .HasColumnType("int");

                    b.HasKey("CompanyStock_Id", "Shipment_Id");

                    b.HasIndex("Shipment_Id");

                    b.ToTable("CompanyStocks_Shipments");
                });

            modelBuilder.Entity("ENN_Cargo.Models.Driver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Experience")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TruckCompany_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TruckCompany_Id");

                    b.ToTable("Drivers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "KKaloqnov@gmail.com",
                            Experience = 5,
                            FirstName = "Kondio",
                            LastName = "Kaloqnov",
                            PhoneNumber = "08954032134",
                            TruckCompany_Id = 1
                        },
                        new
                        {
                            Id = 2,
                            Email = "JIvanov@gmail.com",
                            Experience = 8,
                            FirstName = "Jelqzko",
                            LastName = "Ivanov",
                            PhoneNumber = "08756043245",
                            TruckCompany_Id = 2
                        });
                });

            modelBuilder.Entity("ENN_Cargo.Models.Shipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PickUpDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ToAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Shipments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DeliveryDate = new DateTime(2025, 1, 31, 20, 45, 4, 150, DateTimeKind.Local).AddTicks(5113),
                            Description = "Electronics",
                            FromAddress = "Sklad Kappa",
                            PickUpDate = new DateTime(2025, 1, 28, 20, 45, 4, 150, DateTimeKind.Local).AddTicks(5063),
                            ToAddress = "Kaufland",
                            Weight = 24.0
                        },
                        new
                        {
                            Id = 2,
                            DeliveryDate = new DateTime(2025, 2, 2, 20, 45, 4, 150, DateTimeKind.Local).AddTicks(5124),
                            Description = "Furniture",
                            FromAddress = "Sklad Videnov",
                            PickUpDate = new DateTime(2025, 1, 28, 20, 45, 4, 150, DateTimeKind.Local).AddTicks(5121),
                            ToAddress = "Metro",
                            Weight = 27.0
                        });
                });

            modelBuilder.Entity("ENN_Cargo.Models.TruckCompanies_Shipments", b =>
                {
                    b.Property<int>("TruckCompany_Id")
                        .HasColumnType("int");

                    b.Property<int>("Shipment_Id")
                        .HasColumnType("int");

                    b.HasKey("TruckCompany_Id", "Shipment_Id");

                    b.HasIndex("Shipment_Id");

                    b.ToTable("TruckCompanies_Shipments");
                });

            modelBuilder.Entity("ENN_Cargo.Models.TruckCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TruckCompanies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "J.K Vasil Levski 23, Kazanlak",
                            Email = "expresslog@gmail.com",
                            Name = "Express Logistics",
                            PhoneNumber = "0876038543"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Stolipinovo 12, Plovdiv",
                            Email = "fastfre@gmail.com",
                            Name = "Fast Freight",
                            PhoneNumber = "08850923854"
                        });
                });

            modelBuilder.Entity("ENN_Cargo.Models.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TruckCompany_Id")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TruckCompany_Id");

                    b.ToTable("Vehicles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Brand = "Volvo",
                            LicensePlate = "CT1745AM",
                            Model = "FH16",
                            TruckCompany_Id = 1,
                            Year = 2019
                        },
                        new
                        {
                            Id = 2,
                            Brand = "Mercedes",
                            LicensePlate = "CA1999PM",
                            Model = "Actros",
                            TruckCompany_Id = 2,
                            Year = 2023
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ENN_Cargo.Models.CompanyStocks_Shipments", b =>
                {
                    b.HasOne("ENN_Cargo.Models.CompanyStock", "CompanyStock")
                        .WithMany("CompanyStocks_Shipments")
                        .HasForeignKey("CompanyStock_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ENN_Cargo.Models.Shipment", "Shipment")
                        .WithMany("CompanyStocks_Shipments")
                        .HasForeignKey("Shipment_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyStock");

                    b.Navigation("Shipment");
                });

            modelBuilder.Entity("ENN_Cargo.Models.Driver", b =>
                {
                    b.HasOne("ENN_Cargo.Models.TruckCompany", "TruckCompany")
                        .WithMany("Drivers")
                        .HasForeignKey("TruckCompany_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TruckCompany");
                });

            modelBuilder.Entity("ENN_Cargo.Models.TruckCompanies_Shipments", b =>
                {
                    b.HasOne("ENN_Cargo.Models.Shipment", "Shipment")
                        .WithMany("TruckCompanies_Shipments")
                        .HasForeignKey("Shipment_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ENN_Cargo.Models.TruckCompany", "TruckCompany")
                        .WithMany("TruckCompanies_Shipments")
                        .HasForeignKey("TruckCompany_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shipment");

                    b.Navigation("TruckCompany");
                });

            modelBuilder.Entity("ENN_Cargo.Models.Vehicle", b =>
                {
                    b.HasOne("ENN_Cargo.Models.TruckCompany", "TruckCompany")
                        .WithMany("Vehicles")
                        .HasForeignKey("TruckCompany_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TruckCompany");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ENN_Cargo.Models.CompanyStock", b =>
                {
                    b.Navigation("CompanyStocks_Shipments");
                });

            modelBuilder.Entity("ENN_Cargo.Models.Shipment", b =>
                {
                    b.Navigation("CompanyStocks_Shipments");

                    b.Navigation("TruckCompanies_Shipments");
                });

            modelBuilder.Entity("ENN_Cargo.Models.TruckCompany", b =>
                {
                    b.Navigation("Drivers");

                    b.Navigation("TruckCompanies_Shipments");

                    b.Navigation("Vehicles");
                });
#pragma warning restore 612, 618
        }
    }
}
