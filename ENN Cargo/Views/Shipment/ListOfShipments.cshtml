@model ENN_Cargo.Models.ShipmentViewModel@{
    ViewData["Title"] = "Shipments List";
}
<h1>@ViewData["Title"]</h1><form asp-controller="Shipment" asp-action="ListOfShipments" method="get" class="mb-4">
    <div class="form-row">
        <div class="col-md-3">
            <label asp-for="SelectedFromCountry">From Country:</label>
            <select asp-for="SelectedFromCountry" asp-items="Model.FromCountries" class="form-control" id="SelectedFromCountry">
                <option value="">Select A Country</option>
            </select>
        </div>
        <div class="col-md-3">
            <label asp-for="SelectedFromTown">From Town:</label>
            <select asp-for="SelectedFromTown" asp-items="Model.FromTowns" class="form-control" id="SelectedFromTown">
                <option value="">Select A Town</option>
            </select>
        </div>
        <div class="col-md-3">
            <label asp-for="SelectedToCountry">To Country:</label>
            <select asp-for="SelectedToCountry" asp-items="Model.ToCountries" class="form-control" id="SelectedToCountry">
                <option value="">Select A Country</option>
            </select>
        </div>
        <div class="col-md-3">
            <label asp-for="SelectedToTown">To Town:</label>
            <select asp-for="SelectedToTown" asp-items="Model.ToTowns" class="form-control" id="SelectedToTown">
                <option value="">Select A Town</option>
            </select>
        </div>
    </div>
    <div class="form-row mt-3">
        <div class="col-md-3">
            <label asp-for="MinWeight">Min Weight:</label>
            <input type="number" asp-for="MinWeight" class="form-control" step="0.01" />
        </div>
        <div class="col-md-3">
            <label asp-for="MaxWeight">Max Weight:</label>
            <input type="number" asp-for="MaxWeight" class="form-control" step="0.01" />
        </div>
        <div class="col-md-3">
            <label asp-for="PickUpDate">Pick-up Date (From):</label>
            <input type="date" asp-for="PickUpDate" class="form-control" />
        </div>
        <div class="col-md-3">
            <label asp-for="DeliveryDate">Delivery Date (From):</label>
            <input type="date" asp-for="DeliveryDate" class="form-control" />
        </div>
    </div>
    <button type="submit" class="btn btn-primary mt-3">Filter</button>
    <a asp-controller="Shipment" asp-action="ListOfShipments" class="btn btn-secondary mt-3">Clear Filters</a>
</form><table class="table table-bordered table-striped">
    <thead class="thead-dark">
        <tr>
            <th>Description</th>
            <th>Weight</th>
            <th>From Address</th>
            <th>From Town</th>
            <th>From Country</th>
            <th>To Address</th>
            <th>To Town</th>
            <th>To Country</th>
            <th>Pick Up Date</th>
            <th>Delivery Date</th>
            <th>Status</th>
            @if (User.IsInRole("Admin") || User.IsInRole("TruckCompany"))
            {
                <th>Action</th>
            }
        </tr>
    </thead>
    <tbody>
        @if (Model.Shipments == null || !Model.Shipments.Any())
        {
            <tr>
                <td colspan="@(User.IsInRole("Admin") || User.IsInRole("TruckCompany") ? 12 : 11)">No shipments found.</td>
            </tr>
        }
        else
        {
            @foreach (var shipment in Model.Shipments)
            {
                <tr>
                    <td>@shipment.Description</td>
                    <td>@shipment.Weight</td>
                    <td>@shipment.FromAddress</td>
                    <td>@shipment.FromTown</td>
                    <td>@shipment.FromCountry</td>
                    <td>@shipment.ToAddress</td>
                    <td>@shipment.ToTown</td>
                    <td>@shipment.ToCountry</td>
                    <td>@shipment.PickUpDate</td>
                    <td>@shipment.DeliveryDate</td>
                    <td>@shipment.Status</td>
                    @if (User.IsInRole("Admin"))
                    {
                        <td>
                            <a asp-controller="Shipment" asp-action="UpdateShipment" asp-route-id="@shipment.Id" class="btn btn-warning btn-sm">Edit</a>
                            <form method="post" asp-controller="Shipment" asp-action="Delete" asp-route-id="@shipment.Id" class="d-inline" onsubmit="deleteItem(event, this, 'shipment'); return false;">
                                @Html.AntiForgeryToken()
                                <button type="submit" class="btn btn-danger btn-sm">Delete</button>
                            </form>
                        </td>
                    }
                    else if ((User.IsInRole("TruckCompany") || User.IsInRole("Admin")) && shipment.Status == "Available")
                    {
                        <td>
                            <a asp-controller="Shipment" asp-action="AssignShipment" asp-route-id="@shipment.Id" class="btn btn-primary btn-sm">Get</a>
                        </td>
                    }
                </tr>
            }
        }
    </tbody>
</table>@if (User.IsInRole("Admin") || User.IsInRole("ShipmentCompany"))
{
    <a asp-controller="Shipment" asp-action="AddShipment" class="btn btn-success">Add New Shipment</a>
}@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            var predefinedTowns = @Html.Raw(Json.Serialize(Model.PredefinedTowns));
            updateTownsDropdown("From", document.getElementById("SelectedFromCountry").value);
            updateTownsDropdown("To", document.getElementById("SelectedToCountry").value);            document.getElementById("SelectedFromCountry").addEventListener("change", function () {
                updateTownsDropdown("From", this.value);
            });            document.getElementById("SelectedToCountry").addEventListener("change", function () {
                updateTownsDropdown("To", this.value);
            });            function updateTownsDropdown(type, selectedCountry) {
                var townsDropdown = document.getElementById("Selected" + type + "Town");
                townsDropdown.innerHTML = '<option value="">Select A Town</option>';
                if (predefinedTowns[selectedCountry]) {
                    predefinedTowns[selectedCountry].forEach(function (town) {
                        var option = document.createElement("option");
                        option.value = town;
                        option.text = town;
                        if ((town === "@Model.SelectedFromTown" && type === "From") || (town === "@Model.SelectedToTown" && type === "To")) {
                            option.selected = true;
                        }
                        townsDropdown.appendChild(option);
                    });
                }
            }
        });        function deleteItem(event, form, itemType) {
            event.preventDefault();
            if (confirm(`Are you sure you want to delete this ${itemType}?`)) {
                $.ajax({
                    url: form.action,
                    type: 'POST',
                    data: $(form).serialize(),
                    success: function(response) {
                        if (response.success) {
                            $(form).closest('tr').remove();
                        } else {
                            alert(response.message || `Error deleting ${itemType}.`);
                        }
                    },
                    error: function(xhr, status, error) {
                        alert(`Error deleting ${itemType}: ${xhr.responseText || 'Unknown error'}`);
                    }
                });
            }
        }
    </script>
}